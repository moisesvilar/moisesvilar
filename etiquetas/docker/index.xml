<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Write some code!</title>
    <link>https://moisesvilar.github.io/etiquetas/docker/</link>
    <description>Recent content in Docker on Write some code!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <copyright>&amp;copy; Esta obra está bajo una &lt;a target=&#39;_blank&#39; rel=&#39;license&#39; href=&#39;http://creativecommons.org/licenses/by/4.0/&#39;&gt;Licencia Creative Commons Atribución 4.0 Internacional&lt;/a&gt;.</copyright>
    <lastBuildDate>Wed, 05 Apr 2017 19:18:55 +0200</lastBuildDate>
    
	<atom:link href="https://moisesvilar.github.io/etiquetas/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>docker VIII - en el mundo real</title>
      <link>https://moisesvilar.github.io/post/docker-real-8/</link>
      <pubDate>Wed, 05 Apr 2017 19:18:55 +0200</pubDate>
      
      <guid>https://moisesvilar.github.io/post/docker-real-8/</guid>
      <description>¡Llegamos al final de nuestra serie de Docker!
En este breve post de hoy voy a presentaros los entornos Docker con los que trabajamos en algunos nuestros proyectos reales.
Tenéis el código necesario en este repositorio de Github.
Resumiendo:
 Tenemos dos entornos: uno como servidor de aplicaciones con Apache y PHP; otro para una base de datos MariaDB 5.5. Ambos se basan en el sistema operativo CentOS 7. ¿Por qué?</description>
    </item>
    
    <item>
      <title>docker VII - volúmenes</title>
      <link>https://moisesvilar.github.io/post/docker-volumes-7/</link>
      <pubDate>Sat, 11 Feb 2017 18:51:00 +0100</pubDate>
      
      <guid>https://moisesvilar.github.io/post/docker-volumes-7/</guid>
      <description>Como bien sabéis, si habéis estado atentos hasta ahora, Docker, para cada contenedor, crea una capa de lectura/escritura que es persistente mientras no destruyamos su contenedor.
En este artículo, mientras montábamos nuestro entorno de desarrollo, este problema lo solventamos creando un volumen de datos, pero un volumen muy particular, porque montamos un directorio de nuestro equipo local anfitrión en un directorio concreto dentro de nuestro contenedor. Esto nos permitía ir implementando nuestro código (con nuestras herramientas, preferidas, nuestro IDE, haciendo TDD si así lo quisiéramos&amp;hellip;) en nuestro equipo local y dichas modificaciones quedaban reflejadas automáticamente en el contenedor.</description>
    </item>
    
    <item>
      <title>docker VI - dockerfiles</title>
      <link>https://moisesvilar.github.io/post/docker-dockerfiles-6/</link>
      <pubDate>Fri, 03 Feb 2017 19:56:56 +0100</pubDate>
      
      <guid>https://moisesvilar.github.io/post/docker-dockerfiles-6/</guid>
      <description>En el anterior post montamos un entorno con Apache y PHP sobre una distribución Alpine. Pero lo hicimos &amp;ldquo;a mano&amp;rdquo;, es decir:
 Creamos un contenedor a partir de la imagen de Alpine. Instalamos en el contenedor los binarios de Apache y PHP (o lo que es lo mismo, modificamos la capa de lectura/escritura del contenedor con dichos binarios). Creamos una imagen a partir del contenedor modificado (o lo que es lo mismo, &amp;ldquo;congelamos&amp;rdquo; el sistema de ficheros de dicho contenedor, incluyendo su capa de lectura/escritura).</description>
    </item>
    
    <item>
      <title>docker V - preparando un entorno</title>
      <link>https://moisesvilar.github.io/post/docker-5-environment/</link>
      <pubDate>Fri, 27 Jan 2017 17:18:27 +0100</pubDate>
      
      <guid>https://moisesvilar.github.io/post/docker-5-environment/</guid>
      <description>El bueno y viejo PHP. Un lenguaje tan usado como vilipendiado.
Pero a mi me gusta.
Vale que su API ha crecido sin orden ni concierto y a veces te encuentras tantas incongruencias que parece que la han diseñado durante un atracón de cerveza y marihuana.
Vale que ha sido usado durante años por gente sin formación, o por lo menos sin un mínimo cariño por las cosas bien hechas, y eso lo ha convertido en uno de los referentes del código espagueti.</description>
    </item>
    
    <item>
      <title>docker IV - manejando contenedores</title>
      <link>https://moisesvilar.github.io/post/docker-4-containers/</link>
      <pubDate>Sun, 15 Jan 2017 14:10:02 +0100</pubDate>
      
      <guid>https://moisesvilar.github.io/post/docker-4-containers/</guid>
      <description>Como al final del anterior post, os recomiendo que tengáis el ordenador a mano mientras leeis. ¡Hoy toca picar muchos comandos!
 Muy bien, chic@s. Vamos a ver un par de comandos más de la Docker machine y nos pondremos ya de inmediato a lanzar nuestros contenedores.
Estado de nuestra VM Docker En el anterior post lo habíamos dejado con nuestra máquina virtual Docker (que habíamos llamado default) up and running.</description>
    </item>
    
    <item>
      <title>docker III - docker hub, docker machine</title>
      <link>https://moisesvilar.github.io/post/docker-concepts-3/</link>
      <pubDate>Thu, 12 Jan 2017 20:49:11 +0100</pubDate>
      
      <guid>https://moisesvilar.github.io/post/docker-concepts-3/</guid>
      <description>En este post veremos los últimos acordes antes de ponernos a tocar la sinfonía. Lo dividiré en dos partes. En la primera, describiremos dos conceptos que nos serán útiles a la hora de trabajar con Docker. En la segunda, haremos un pequeño tutorial de cómo instalar Docker en sistemas sin soporte nativo.
Vamos allá!
Últimos conceptos&amp;hellip; por ahora Veremos dos de ellos: el Docker Hub y la Docker machine.</description>
    </item>
    
    <item>
      <title>docker II - capas e imágenes</title>
      <link>https://moisesvilar.github.io/post/docker-layers-2/</link>
      <pubDate>Tue, 10 Jan 2017 19:51:45 +0100</pubDate>
      
      <guid>https://moisesvilar.github.io/post/docker-layers-2/</guid>
      <description>En el anterior post vimos que una de las herramientas heredadas de Unix que utilizaba Docker eran los chroot. Con ellos, podíamos establecer para un proceso en qué directorio comenzaba su sistema de ficheros, su carpeta raíz. También dijimos que, en la gestión de dicho sistema de ficheros, Docker era bastante eficiente.
En este post veremos en qué consiste esta eficiencia y cómo la consigue Docker.
Las capas Imaginémonos que tenemos dos entornos de ejecución para dos aplicaciones.</description>
    </item>
    
    <item>
      <title>docker I - lo básico</title>
      <link>https://moisesvilar.github.io/post/docker-basics-1/</link>
      <pubDate>Thu, 05 Jan 2017 09:53:15 +0100</pubDate>
      
      <guid>https://moisesvilar.github.io/post/docker-basics-1/</guid>
      <description>Hace un par de años, cuando trabajaba en el CITIUS, David Martínez nos impartió un pequeño seminario de una herramienta con la que había empezado a trastear hacía poco y lo tenía entusiasmado.
O bien porque no le presté mucha atención (lo siento, David, no eres tú, soy yo) o bien porque no supe entender su potencial en aquel momento, pero dejé aquello a un lado y me desentendí un poco de todo ese &amp;ldquo;nuevo&amp;rdquo; mundo.</description>
    </item>
    
  </channel>
</rss>